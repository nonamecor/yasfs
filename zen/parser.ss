(define (Int v) (tuple Int v))
(define (Bool v) (tuple Bool v))
(define (String v) (tuple String v))
(define (Var s) (tuple Var s))
(define (Var&s v) (case v (Var (field 0 v))))
(define (App t ts) (tuple App t ts))
(define (App&t v) (case v (App (field 0 v))))
(define (App&ts v) (case v (App (field 1 v))))
(define (Fun args ts) (tuple Fun args ts))
(define (Fun1 args ts) (tuple Fun1 args ts))
(define (If t1 t2 t3) (tuple If t1 t2 t3))
(define (Plus t1 t2) (tuple Plus t1 t2))
(define (Sub t1 t2) (tuple Sub t1 t2))
(define (Mul t1 t2) (tuple Mul t1 t2))
(define (Div t1 t2) (tuple Div t1 t2))
(define (Equal t1 t2) (tuple Equal t1 t2))
(define (Tuple tag ls) (tuple Tuple tag ls))
(define (Tuple&tag t) (case t (Tuple (field 0 t))))
(define (Tuple&ls t) (case t (Tuple (field 1 t))))
(define (Field n t) (tuple Field n t))

(define (parse exp)
  (if (pair? exp)
      (parse-sexp exp)
      (parse-atom exp)))

(define (parse-atom v)
  (cond
   ((boolean? v) (Bool v))
   ((integer? v) (Int v))
   ((string? v) (String v))
   ((symbol? v) (Var v))))

(define (parse-sexp exp)
  (let ((hd (car exp))
        (tl (cdr exp)))
    (cond
     ((eq? hd 'if)
      (If (parse (car tl)) (parse (cadr tl)) (parse (caddr tl))))
     ((eq? hd '+)
      (Plus (parse (car tl)) (parse (cadr tl))))
     ((eq? hd '-)
      (Sub (parse (car tl)) (parse (cadr tl))))
     ((eq? hd '*)
      (Mul (parse (car tl)) (parse (cadr tl))))
     ((eq? hd '/)
      (Div (parse (car tl)) (parse (cadr tl))))
     ((eq? hd 'field)
      (Field (car tl) (parse (cadr tl))))
     ((eq? hd 'lambda)
      (Fun (car tl) (map parse (cdr tl))))
     ((eq? hd 'lambda1)
      (Fun1 (car tl) (map parse (cdr tl))))
     ((eq? hd 'tuple)
      (Tuple (car tl) (map parse (cdr tl))))
     ((eq? hd '=)
      (Equal (parse (car tl)) (parse (cadr tl))))
     (#t (App (parse hd) (map parse tl))))))
